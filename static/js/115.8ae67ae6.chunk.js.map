{"version":3,"file":"static/js/115.8ae67ae6.chunk.js","mappings":"qOAEaA,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6NAWtBC,EAAYH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iEAIrBG,EAAQL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gE,oBCdjBK,EAAQP,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sFAMpBM,EAAMR,EAAAA,GAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6DAKnBG,EAAQL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0BAGlBO,GAAaT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAoBW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,+D,6BChBjCU,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,WAAY,EAErDC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,OAAOC,WAAY,E,SCOxDC,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,SAAS,2BAC5BC,OAAQJ,EAAAA,KAAaK,IAAI,EAAG,cACzBF,SAAS,6BAEDG,EAAc,WACzB,IAAMZ,GAAWa,EAAAA,EAAAA,IAAYf,GACvBgB,GAAWC,EAAAA,EAAAA,MAWjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CACbV,KAAM,GACNE,OAAQ,IAEVS,iBAAkBd,EAEpBe,SAAU,SAACC,EAAQC,IAjBI,SAAAC,GACvB,IAAMC,EAAaxB,EAASyB,MAC1B,SAAAC,GAAE,OAAIA,EAAGlB,KAAKmB,gBAAkBJ,EAAMf,KAAKmB,aAAa,IAE1D,GAAIH,EAAY,OAAOI,MAAMJ,EAAWhB,KAAO,4BAC/Ce,EAAMM,IAAKC,EAAAA,EAAAA,MACRhB,GAASiB,EAAAA,EAAAA,IAAWR,GAEzB,CAUIS,CAAcX,GACdC,EAAQW,WACR,EAAEC,UAEFC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAF,SAAA,EACLC,EAAAA,EAAAA,MAAC1C,EAAK,CAAC4C,QAAQ,OAAMH,SAAA,EAAClB,EAAAA,EAAAA,KAACzB,EAAK,CAAA2C,SAAC,UACzBlB,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CAAC9B,KAAK,OAAO+B,YAAY,UAC/BvB,EAAAA,EAAAA,KAACrB,EAAU,CAACa,KAAK,OAAOgC,UAAU,YAEtCL,EAAAA,EAAAA,MAAC1C,EAAK,CAAC4C,QAAQ,SAAQH,SAAA,EAAClB,EAAAA,EAAAA,KAACzB,EAAK,CAAA2C,SAAC,YAC3BlB,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CAACG,KAAK,MAAMjC,KAAK,SAAS+B,YAAY,SAC5CvB,EAAAA,EAAAA,KAACrB,EAAU,CAACa,KAAK,SAASgC,UAAU,YAE1CxB,EAAAA,EAAAA,KAACtB,EAAG,CAAE+C,KAAK,SAAQP,SAAC,oBAGxB,E,UCnDazC,EAAQP,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6HAQpBsD,EAAMxD,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+BCDhBuD,EAAS,WACpB,IAAM7B,GAAWC,EAAAA,EAAAA,MAEf,OACIoB,EAAAA,EAAAA,MAAC1C,EAAK,CAAAyC,SAAA,EACFlB,EAAAA,EAAAA,KAAC0B,EAAG,CAAAR,SAAC,4BACLlB,EAAAA,EAAAA,KAAA,SACIyB,KAAK,OACLjC,KAAK,SAEjBoC,SAAU,SAACC,GAAO/B,GAASgC,EAAAA,EAAAA,IAAaD,EAAEE,OAAOxB,OAAO,MAK5D,E,UCtBayB,EAAO9D,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yCAIhB6D,EAAW/D,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mDAIpBM,EAAMR,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8CAKnBsD,EAAMxD,EAAAA,GAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,6C,UCNhB8D,EAAc,WACzB,IAAMlD,GAAWa,EAAAA,EAAAA,IAAYf,GACvBK,GAASU,EAAAA,EAAAA,IAAYX,GACrBY,GAAWC,EAAAA,EAAAA,OAEhBoC,EAAAA,EAAAA,YAAU,WACXrC,GAASsC,EAAAA,EAAAA,MACV,GAAG,CAACtC,IAEH,IAAMuC,EAAmBlD,EAAOwB,cAAc2B,OACxCC,GAAkBC,EAAAA,EAAAA,GAAIxD,GAAUG,QAAO,SAAAsD,GAAO,OAChDA,EAAQjD,KAAKmB,cAAc+B,SAASL,EAAiB,IAGvD,OACErC,EAAAA,EAAAA,KAACgC,EAAI,CAAAd,SACAqB,EAAgBI,KAAI,SAAAF,GACjB,OACItB,EAAAA,EAAAA,MAACc,EAAQ,CACLzC,KAAMiD,EAAQjD,KACdiD,QAASA,EAAQ/C,OAAOwB,SAAA,EACxBlB,EAAAA,EAAAA,KAAC0B,EAAG,CAAAR,SAAEuB,EAAQjD,QACdQ,EAAAA,EAAAA,KAAC0B,EAAG,CAAAR,SAAEuB,EAAQ/C,UACdM,EAAAA,EAAAA,KAACtB,EAAG,CAACkE,QAAS,kBAAI9C,GAAS+C,EAAAA,EAAAA,IAAcJ,EAAQ5B,IAAI,EAACK,SAAC,WAL5CJ,EAAAA,EAAAA,MAQvB,KAGV,E,8BC3Be,SAASgC,IACtB,IAAMC,GAAQlD,EAAAA,EAAAA,IAAYmD,EAAAA,IACrBlD,GAAWC,EAAAA,EAAAA,MAOd,OALHoC,EAAAA,EAAAA,YAAU,WACK,OAAVY,IAAgBE,EAAAA,EAAAA,IAAM,2BAADC,OAA4BH,IACrDjD,GAASqD,EAAAA,EAAAA,KACV,GAAG,CAACrD,EAAUiD,KAGP5B,EAAAA,EAAAA,MAAClD,EAAS,CAAAiD,SAAA,EACVlB,EAAAA,EAAAA,KAAC3B,EAAS,CAAA6C,SAAC,eACXlB,EAAAA,EAAAA,KAACJ,EAAW,KACZI,EAAAA,EAAAA,KAACzB,EAAK,CAAA2C,SAAC,cACPlB,EAAAA,EAAAA,KAAC2B,EAAM,KACP3B,EAAAA,EAAAA,KAACkC,EAAW,MAGpB,C","sources":["pages/contactsPage/contactPage.styled.js","components/contactForm/contactForm.styled.js","redux/selectors.js","components/contactForm/contactForm.jsx","components/filter/filter.styled.js","components/filter/filter.jsx","components/contactList/contactList.styled.js","components/contactList/contactList.jsx","pages/contactsPage/contactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\nwidth: 500px;\nmargin-left: auto;\nmargin-right: auto;\ndisplay:flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\ngap: 15px;\nbox-shadow: -11px 11px 37px 7px rgba(81, 42, 42, 0.47);`\n\nexport const MainTitle = styled.h1`\nfont-size: xx-large;\nfont-weight: 900;\ncolor:#434455;`\nexport const Title = styled.h2`\nfont-size: x-large;\nfont-weight: 600;\ncolor:#434455;`","import styled from 'styled-components';\nimport { ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n  font-size: 18px;\n  font-weight: 700;\n color:rgba(81, 42, 42, 0.47);\n \n`\nexport const Btn = styled.button`\nmargin-top: 15px;\ndisplay:block;\ncolor:#434455;\n`\nexport const Title = styled.div`\nmargin-top: 5px;`\n\nexport const ErrMessage = styled(ErrorMessage)`\nwidth: 200px;\nmargin-left:auto;\nmargin-right: auto;`","\nexport const selectContacts = state => state.contacts.contactList;\n\nexport const selectFilter = state => state.filter.filterValue;","import { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Label, Btn, Title, ErrMessage } from './contactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/selectors';\n\n\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string().required('This field is required!'),\n  number: Yup.number().min(5, 'Too Short!')\n    .required('This field is required!'),\n})\nexport const ContactForm = () => { \n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n \n     const addNewContact = value => {\n    const newContact = contacts.find(\n      el => el.name.toLowerCase() === value.name.toLowerCase()\n    );\n    if (newContact) return alert(newContact.name + ' is already in contacts.');\n    value.id = nanoid();\n       dispatch(addContact(value))\n       \n  }\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={formSchema}  \n \n    onSubmit={(values, actions) => {\n      addNewContact(values)\n      actions.resetForm();        \n      }} \n    >\n      <Form>\n      <Label htmlFor=\"name\"><Title>Name</Title>\n          <Field name=\"name\" placeholder=\"name\" />\n          <ErrMessage name=\"name\" component=\"div\" />\n      </Label>\n      <Label htmlFor=\"number\"><Title>Number</Title>\n          <Field type=\"tel\" name=\"number\" placeholder=\"tel\" />\n          <ErrMessage name=\"number\" component=\"div\" />\n      </Label>\n    <Btn  type=\"submit\">Add contact</Btn>\n      </Form>\n    </Formik>)\n};\n    \n\n\n\n\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\ncolor:#434455;\nfont-size: 18px;\nfont-weight: 700;\ndisplay: flex;\nflex-direction:column;\nalign-items: center;\n`\nexport const Div = styled.div`\nmargin-bottom: 5px;\n`","import { changeFilter } from '../../redux/filterSlice';\nimport { Label, Div } from './filter.styled';\nimport { useDispatch} from 'react-redux';\n\n\n\n\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n    return (\n        <Label>\n            <Div>Find contacts by names</Div>\n            <input\n                type=\"text\"\n                name=\"filter\"                \n               \n\t\t\t\tonChange={(e) => {dispatch(changeFilter(e.target.value))}}\n            ></input>\n           \n        </Label>\n    ) \n}","import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style: none;\npadding: 0%;`\n \nexport const ListItem = styled.li`\n display: flex;\n margin-bottom: 10px;\n `\nexport const Btn = styled.button`\nmargin-left: auto;\ncolor:#434455;\n`\n\nexport const Div = styled.div`\nmargin-left: 20px ;\ncolor:#434455;`\n","\nimport { List,ListItem, Btn ,Div} from './contactList.styled';\nimport { nanoid } from 'nanoid';\n import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact,fetchContacts } from 'redux/operations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { useEffect } from 'react';\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  \tuseEffect(() => {\n\t\tdispatch(fetchContacts());\n\t}, [dispatch]);\n\n  const filterNormilized = filter.toLowerCase().trim();\n  const visibleContacts = [...contacts].filter(contact =>\n      contact.name.toLowerCase().includes(filterNormilized)\n    );\n\n    return (\n      <List>\n          {visibleContacts.map(contact => {\n              return (\n                  <ListItem key={nanoid()}\n                      name={contact.name}\n                      contact={contact.number}>\n                      <Div>{contact.name}</Div>\n                      <Div>{contact.number}</Div>\n                      <Btn onClick={()=>dispatch(deleteContact(contact.id))}>Del</Btn>\n                  </ListItem>\n              )\n          })}\n       </List>\n  );\n}\n","import { Container, MainTitle, Title } from './contactPage.styled';\nimport { ContactForm } from '../../components/contactForm/contactForm';\nimport { Filter } from '../../components/filter/filter';\nimport { ContactList } from '../../components/contactList/contactList';\nimport { useEffect } from 'react';\nimport { useDispatch , useSelector} from 'react-redux';\nimport { resetError } from 'redux/auth/authSlise';\nimport { statusUserError } from 'redux/auth/authSelectors';\nimport { toast } from 'react-hot-toast';\n\n\nexport default function ContactsPage() {\n  const error = useSelector(statusUserError);\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tif (error !== null) toast(`Error loading contacts: ${error}`);\n\t\tdispatch(resetError());\n\t}, [dispatch, error]);\n\n    return (\n        <Container>\n        <MainTitle>Phonebook</MainTitle>\n        <ContactForm />\n        <Title>Contacts</Title>\n        <Filter  />\n        <ContactList/>\n      </Container> \n    )\n}"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","MainTitle","_templateObject2","Title","_templateObject3","Label","Btn","ErrMessage","ErrorMessage","_templateObject4","selectContacts","state","contacts","contactList","selectFilter","filter","filterValue","formSchema","Yup","shape","name","required","number","min","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","value","newContact","find","el","toLowerCase","alert","id","nanoid","addContact","addNewContact","resetForm","children","_jsxs","Form","htmlFor","Field","placeholder","component","type","Div","Filter","onChange","e","changeFilter","target","List","ListItem","ContactList","useEffect","fetchContacts","filterNormilized","trim","visibleContacts","_toConsumableArray","contact","includes","map","onClick","deleteContact","ContactsPage","error","statusUserError","toast","concat","resetError"],"sourceRoot":""}